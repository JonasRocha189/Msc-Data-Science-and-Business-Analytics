reglin2<-read.csv("reglin2.csv")
head(reglin2)
# quadratic
nlmod1<-lm(y~x+I(x^2),data=reglin2)
summary(nlmod1)
# plot
ggplot(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
# plot
ggplot(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
# plot
install.packages("ggplot")
ggplot(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
library(ggplot)
ggplot2(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
library(ggplot2)
ggplot2(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
# plot
install.packages("ggplot")
# plot
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot2(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
# plot
ggplot(reglin2, aes(x=x, y=y)) +
geom_point() +
stat_smooth(aes(y = y),method = "lm",
formula = y ~ x + I(x^2), size = 1)
head(reglin2)
summary(nlmod1)
# alternative
reglin2$x2<-reglin2$x^2
head(reglin2)
nlmod2<-lm(y~x+x2,data=reglin2)
summary(nlmod2)
# cubic
nlmod3<-lm(y~x+I(x^2)+I(x^3),data=reglin2)
summary(nlmod3)
reglin3<-read.csv("Data/reglin3.csv")
reglin3<-read.csv("reglin3.csv")
head(reglin3)
#
# modele sans effet de sexe
# model without sex effect
mod.int<-lm(intent~fix,data=reglin3)
summary(mod.int)
ggplot(data = reglin3,
aes(x = fix, y = intent)) +
geom_point(aes(col = as.factor(sex))) +
geom_smooth(method = "lm",
se = FALSE,
formula = "y ~ x",
col = "black",
fullrange = TRUE)
#
# modele sans interactions
# model without interaction
mod.int1<-lm(intent~as.factor(sex)+fix,data=reglin3)
summary(mod.int1)
pred.int1<-mod.int1$fitted.values
ggplot(reglin3, aes(x=fix, y=intent,col=as.factor(sex)))+
geom_point() +
geom_line(aes(y = pred.int1), size = 1)
#
# modele avec interactions
# model with interaction
mod.int2<-lm(intent~as.factor(sex)*fix,data=reglin3)
summary(mod.int2)
pred.int2<-mod.int2$fitted.values
ggplot(reglin3, aes(x=fix, y=intent,col=as.factor(sex)))+
geom_point() +
geom_line(aes(y = pred.int2), size = 1)
# alternative
ggplot(data = reglin3,
aes(x = fix, y = intent, col = as.factor(sex))) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
formula = "y ~ x",
show.legend = FALSE,
fullrange = TRUE)
#
# modele avec interactions + autres variables
# model with interactions + other variables
reglin6<-read.csv("reglin6.csv")
head(reglin6)
mod.int3<-lm(intent~as.factor(sex)*fix+emo+age+as.factor(rev)+as.factor(educ)+stat,data=reglin6)
summary(mod.int3)
########################################################
# 9: multicolinearite / multicollinearity
#
# illustration
ex<-read.table("colinear.txt",header = TRUE)
head(ex)
attach(ex)
summary(age-age2)
cor(age,age3)
cor(age,age4)
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
rcorr(cbind(age,age2,age3,age4))
#
summary(lm(height~age))
summary(lm(height~age+age2))
head(intention)
intention <- read.csv("intention.csv")
head(intention)
# Summary
summary(intention)
# Alternatively
summary2 <- sapply(intention, function(x) c(mean(x), sd(x), min(x), max(x), length(x) ) )
row.names(summary2) <- c("mean", "sd", "min", "max", "n")
summary2
apply(intention[,c(3,5:7)],2,table)
# Histograms
par(mfrow=c(2,2))
hist(intention$intent, xlab = "intention", main = "Histogram")
hist(intention$age, xlab = "age", main = "Histogram")
hist(intention$fix, xlab = "fixation", main = "Histogram")
hist(intention$emo, xlab = "emotion", main = "Histogram")
# Scatterplot and Correlations
par(mfrow=c(1,2))
# intention, fixation
plot(intent~fix, xlab="fixation", ylab="intention", data=intention, lwd=1.5)
# include best linear model
abline(lm(intention~fix, data=intention), lwd=1.5)
# include best linear model
abline(lm(intent~fix, data=intention), lwd=1.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intetion, lwd=1.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=2.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=2)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1.5)
# intention, fixation
plot(intent~fix, xlab="fixation", ylab="intention", data=intention, lwd=1)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1)
# intention, fixation
plot(intent~fix, xlab="fixation", ylab="intention", data=intention, lwd=1.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1.5)
abline(lm(intent~emo, data=intention), lwd=1.5)
# include best linear model
abline(lm(intent~fix, data=intention), lwd=1.5)
# Scatterplot and Correlations
par(mfrow=c(1,2))
# intention, fixation
plot(intent~fix, xlab="fixation", ylab="intention", data=intention, lwd=1.5)
# include best linear model
abline(lm(intent~fix, data=intention), lwd=1.5)
# intention, emotion
plot(intent~emo, xlab="emotion", ylab="intention", data=intention, lwd=1.5)
abline(lm(intent~emo, data=intention), lwd=1.5)
!attach()
help(attach)
# Correlation
cor(cbind(intent, fix, emo))
attach(intention)
# Correlation
cor(cbind(intent,fix,emo))
# Test
cor.test(intent, fix)
cor.text(intent.emo)
cor.text(intent, emo)
cor.test(intent, emo)
library("Hmisc")
rcorr(cbind(intent, fix, emot))
rcorr(cbind(intent, fix, emo))
# Simple Linear Regression
lmod <- lm(intent~fix)
lmod
summary(lmod)
# Confidence Intervals
confint(lomd, level=0.95)
# Confidence Intervals
confint(lmod, level=0.95)
confint(lmod, level=0.99)
# create a new dataFrame
# variables from 1 - 10
new <- data.frame(fix = c(1:10))
new
predict(lomd, newdata=new)
predict(lmod, newdata=new)
# estimate + confidence interval for estimated mean
predict.lm(lmod, newdata=new, interval=c("confidence"), level=0.95)
predict.lm(lmod, newdata=new, interval=c("prediction"), level=0.95)
# displaying things together
library("dplyr")
pred1 <- data.frame(predict.lm(lmod, newdata=new, interval=c("confidence"), level=0.95))
pred2 <- data.frame(predict.lm(lmod, newdata=new, interval=c("prediction"), level=0.95))
predictions <- left_join(pred1, pred2, by=c("fit"))
names(predictions) <- c("prediction", "lwr.ci", "upr.ci", "lwr.pi", "upr.pi")
predictions
# graphs
library(ggplot2)
pred.inter <- predict(lmod, interval="prediction")
intention_new <- cbind(intention, pred.inter)
# linear trend, confidence + predictions intervals
ggplot(intention_new, aes(x=fix, y=intent)) +
geom_point() +
geom_smooth(method = lm, color = "red", se = TRUE) +
geom_line(aes(y=lwr), color = "red", linetype = "dashed") +
geom_line(aes(y=upr), color = "red", linetype = "dashed")
# ordinary residuals
resid(lmod)
# standardized residuals
rstandard(lmod)
# jackknife
rstudent(lmod)
# plots using ggplot
# preparing a dataframe with residuals
library("ggplot2")
res.dat <- data.frame(cbind(intent, fix, lmod$fitted, lmod$residuals, rstandard(lmod), rstudent(lmod)))
names(res.dat) <- c("intent", "fix", "fitted", "resid", "rstand", "rstud")
head(res.dat)
# resid vs fix + smooth
ggplot(data = res.dat, aes(x = fix, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fixation")
# resid vs. fitted + smooth
ggplot(data = res.dat,
aes(x = fitted, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fitted values")
# resid vs. fitted + smooth
ggplot(data = res.dat,
aes(x = fitted, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fitted values")
# histogram rstud
ggplot(data = res.dat, mapping = aes(x = rstud)) +
geom_density() +
geom_histogram(aes(y = ..density..), bins = 20, alpha = 0.5) +
xlab("residuals")
# qqplot rstud
ggplot(data = res.dat, mapping = aes(sample = rstud)) +
stat_qq(distribution = qt, dparams = lmod$df.residual) +
stat_qq_line(distribution = qt, dparams = lmod$df.residual) +
labs(x = "theoretical quantiles",
y = "empirical quantiles") +
ggtitle("QQ-Plot Studentized Residuals")
# plots using basic R functions:
hist(rstudent(lmod),xlab="Residuals",main="Histogram")
# plots using basic R functions:
hist(rstudent(lmod),xlab="Residuals",main="Histogram")
# qqplot rstud
ggplot(data = res.dat, mapping = aes(sample = rstud)) +
stat_qq(distribution = qt, dparams = lmod$df.residual) +
stat_qq_line(distribution = qt, dparams = lmod$df.residual) +
labs(x = "theoretical quantiles",
y = "empirical quantiles") +
ggtitle("QQ-Plot Studentized Residuals")
# plots using basic R functions:
hist(rstudent(lmod),xlab="Residuals",main="Histogram")
# qqplot: alternative
library("EnvStats")
qqPlot(rstudent(lmod),
distribution = "t", param.list=list(df = lmod$df.residual),
add.line=TRUE)
# scatterplots
plot(rstandard(lmod)~lmod$fitted.values,
xlab="fitted values",ylab="residuals")
abline(h=0)
plot(rstandard(lmod)~fix,
xlab="fitted values",ylab="residuals")
abline(h=0)
summary(lmod)
lmod1 <- lm(intent~sex)
summary(lmod1)
# Checking sex as factor
lmod2 <- lm(intent~as.factor(sex))
lmod2
summary(lmod2)
levels(as.factor(sex))
sex<-relevel(as.factor(sex), 2)
lmod3 <- lm(intent~sex)
summary(lmod3)
