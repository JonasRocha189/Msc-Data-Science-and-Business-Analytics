intention<-read.csv("intention.csv")
head(intention)
# Statistiques descriptives et histogrammes
# Descriptive statistics and histograms
summary(intention)
summary<-sapply(intention,function(x) c(mean(x),sd(x),min(x),max(x),length(x)))
row.names(summary)<-c("mean","sd","min","max","n")
summary
apply(intention[,c(3,5:7)],2,table)
# Histogrammes
# Histograms
par(mfrow=c(2,2))
hist(intention$intent,xlab="intention",main="Histogram")
hist(intention$age,xlab="age",main="Histogram")
hist(intention$fix,xlab="fixation",main="Histogram")
hist(intention$emo,xlab="emotion",main="Histogram")
par(mfrow=c(1,2))
# intention, fixation
plot(intent~fix,xlab="fixation",ylab="intention",data=intention,lwd=1.5)
# pour inclure le meilleur modele lineaire
# to include best linear model
abline(lm(intent~fix,data=intention),lwd=1.5)
# intention, emotion
plot(intent~emo,xlab="emotion",ylab="intention",data=intention,lwd=1.5)
abline(lm(intent~emo,data=intention),lwd=1.5)
# correlation
attach(intention)
# correlation
cor(cbind(intent,fix,emo))
# test
cor.test(intent,fix)
cor.test(intent,emo)
cor.test(fix,emo)
# alternative
library("Hmisc")
# alternative
install.packages("Hmisc")
# alternative
#install.packages("Hmisc")
library("Hmisc")
rcorr(cbind(intent,fix,emo))
View(intention)
View(summary)
# Régression linéaire simple
# Simple linear regression
lmod<-lm(intent~fix)
lmod
summary(lmod)
# intervalles de confiance/confidence intervals
confint(lmod,level=0.95)
confint(lmod,level=0.99)
# graphiques avec ggplot
# graphs with ggplot
library(ggplot2)
# modele lineare + intervalle de confiance
# linear trend + confidence interval
ggplot(intention, aes(x=fix, y=intent)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE)
new<-data.frame(fix=c(1:10))
new
# intervalles de confiance pour moyenne estimee
# confidence interval for estimated mean
predict.lm(lmod,newdata=new,interval=c("confidence"),
level=0.95)
# predictions + intervalle de prediction
# predicitons + prediction intervals
predict.lm(lmod,newdata=new,interval=c("prediction"),
level=0.95)
predict(lmod,newdata=new)
##
# pour afficher les resultats dans un teableau
# displaying things together in one table
library("dplyr")
pred1<-data.frame(predict.lm(lmod,newdata=new,interval=c("confidence"),
level=0.95))
pred2<-data.frame(predict.lm(lmod,newdata=new,interval=c("prediction"),
level=0.95))
predictions<-left_join(pred1,pred2,by=c("fit"))
names(predictions)<-c("prediction","lwr.ci","upr.ci","lwr.pi","upr.pi")
predictions
# visualisation:
# graphiques avec ggplot
# graphs with ggplot
library(ggplot2)
pred.inter<- predict(lmod, interval="prediction")
intention_new<-cbind(intention,pred.inter)
# modele lineare, intervalles de confiance + prediction
# linear trend, confidence + prediction intervals
ggplot(intention_new, aes(x=fix, y=intent)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE)+
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
par(mfrow=c(1,1))
# residus ordinaires
# ordinary residuals
resid(lmod)
lmod$residuals
plot(lmod$residuals~lmod$fitted.values)
hist(lmod$residuals)
# modele lineare, intervalles de confiance + prediction
# linear trend, confidence + prediction intervals
ggplot(intention_new, aes(x=fix, y=intent)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE)+
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
# visualisation:
# graphiques avec ggplot
# graphs with ggplot
library(ggplot2)
pred.inter<- predict(lmod, interval="prediction")
intention_new<-cbind(intention,pred.inter)
# modele lineare, intervalles de confiance + prediction
# linear trend, confidence + prediction intervals
ggplot(intention_new, aes(x=fix, y=intent)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE)+
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
par(mfrow=c(1,1))
# resid vs. fix + smooth
ggplot(data = res.dat,
aes(x = fix, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fixation")
# resid vs. fix + smooth
ggplot(data = res.dat,
aes(x = fix, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fixation")
res.dat<-data.frame(cbind(intent,fix,lmod$fitted,lmod$residuals,rstandard(lmod),rstudent(lmod)))
names(res.dat)<-c("intent","fix","fitted","resid","rstand","rstud")
head(res.dat)
# histogram rstud
ggplot(data = res.dat, mapping = aes(x = rstud)) +
geom_density() +
geom_histogram(aes(y = ..density..), bins = 20, alpha = 0.5) +
xlab("residuals")
# qqplot rstud
ggplot(data = res.dat, mapping = aes(sample = rstud)) +
stat_qq(distribution = qt, dparams = lmod$df.residua) +
stat_qq_line(distribution = qt, dparams = lmod$df.residual) +
labs(x = "theoretical quantiles",
y = "empirical quantiles") +
ggtitle("QQ-Plot Studentized Residuals")
# modele lineare, intervalles de confiance + prediction
# linear trend, confidence + prediction intervals
ggplot(intention_new, aes(x=fix, y=intent)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE)+
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
# residus ordinaires
# ordinary residuals
resid(lmod)
lmod$residuals
plot(lmod$residuals~lmod$fitted.values)
hist(lmod$residuals)
# standardisé
# standardized
rstandard(lmod)
hist(rstandard(lmod))
plot(rstandard(lmod)~lmod$fitted.values)
# studentized
rstudent(lmod)
hist(rstudent(lmod),xlab="Residuals",main="Histogram")
plot(rstandard(lmod)~lmod$fitted.values)
# graphiques avec ggplot
# graphs using ggplot
library("ggplot2")
res.dat<-data.frame(cbind(intent,fix,lmod$fitted,lmod$residuals,rstandard(lmod),rstudent(lmod)))
names(res.dat)<-c("intent","fix","fitted","resid","rstand","rstud")
head(res.dat)
# histogram rstud
ggplot(data = res.dat, mapping = aes(x = rstud)) +
geom_density() +
geom_histogram(aes(y = ..density..), bins = 20, alpha = 0.5) +
xlab("residuals")
# qqplot rstud
ggplot(data = res.dat, mapping = aes(sample = rstud)) +
stat_qq(distribution = qt, dparams = lmod$df.residua) +
stat_qq_line(distribution = qt, dparams = lmod$df.residual) +
labs(x = "theoretical quantiles",
y = "empirical quantiles") +
ggtitle("QQ-Plot Studentized Residuals")
# qqplot: alternative
library("EnvStats")
qqPlot(rstudent(lmod),
distribution = "t", param.list=list(df = lmod$df.residual),
add.line=TRUE)
# resid vs. fitted + smooth
ggplot(data = res.dat,
aes(x = fitted, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fitted values")
# resid vs. fix + smooth
ggplot(data = res.dat,
aes(x = fix, y = rstud)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fixation")
lmod1<-lm(intent~sex)
summary(lmod1)
lmod2<-lm(intent~as.factor(sex))
summary(lmod2)
levels(as.factor(sex))
sex<-relevel(as.factor(sex),2)
lmod3<-lm(intent~sex)
summary(lmod3)
intention<-read.csv("intention.csv")
head(intention)
########################################################
# 1: Le modele / the model
#    Ex: intention d'achat / intention to buy
mod<-lm(intent~fix+emo+age+sex+stat,data=intention)
summary(mod)
# creation de variables indicatrice
# creating indicator variables
intention$educ1<-as.numeric(intention$educ==1)
intention$educ2<-as.numeric(intention$educ==2)
intention$educ3<-as.numeric(intention$educ==3)
# verification
attach(intention)
table(educ,educ1)
table(educ,educ2)
table(educ,educ3)
# model 1
mod2.1<-lm(intent~educ1+educ2,data=intention)
summary(mod2.1)
# model 2
mod2.2<-lm(intent~educ1+educ3,data=intention)
summary(mod2.2)
summary(mod2.3)
# model 3
mod2.3<-lm(intent~educ2+educ3,data=intention)
summary(mod2.3)
#
# as.factor()
mod2.5<-lm(intent~as.factor(educ),data=intention)
summary(mod2.5)
intention$educ<-relevel(as.factor(intention$educ),ref=2)
mod2.6<-lm(intent~educ,data=intention)
summary(mod2.6)
# toutes comparaisons
# all comparisons
packages.install("emmeans")
# toutes comparaisons
# all comparisons
packages.install(emmeans)
# toutes comparaisons
# all comparisons
package.install(emmeans)
# toutes comparaisons
# all comparisons
install.packages(emmeans)
# toutes comparaisons
# all comparisons
install.packages("emmeans")
library(emmeans)
comp<-emmeans(mod2.6,~educ)
comp
contrast(comp,method="pairwise",adjust="none")
mod<-lm(intent~sex+age+as.factor(rev)+as.factor(educ)+stat+fix+emo,data=intention)
summary(mod)
anova(mod) # (sequential SS)
# SSR
sum(anova(mod)[1:7,2])
# p
sum(anova(mod)[1:7,1])
# SSE
anova(mod)[8,2]
# n-p-1
anova(mod)[8,1]
##
null<-lm(intent~1,data=intention)
summary(null)
# SST
anova(null)
## global f-test
anova(mod,null)
# ... #
# p-value
pf(9.988936,9,110,lower.tail=FALSE)
##
null<-lm(intent~1,data=intention)
summary(null)
# SST
anova(null)
## global f-test
anova(mod,null)
# Test F:
# effets des variables individuellement
# individual variable effects
library(car)
Anova(mod,type=2)
Anova(mod,type=3)
# attention / careful !
?Anova
datapred<-intention[1:10,]
pred<-predict.lm(mod,newdata=datapred)
cbind(datapred,pred)
########################################################
# 5: Analyse des residus
#    residual analysis
resid<-rstudent(mod)
fitted<-mod$fitted.values
res.dat<-cbind(intention,fitted,resid)
View(res.dat)
View(res.dat)
#
# histogram
library(ggplot2)
ggplot(data = res.dat, mapping = aes(x = resid)) +
geom_density() +
geom_histogram(aes(y = ..density..), bins = 10, alpha = 0.5) +
xlab("residuals")
#
# qqplot
ggplot(data = res.dat, mapping = aes(sample = resid)) +
stat_qq(distribution = qt, dparams = mod$df.residua) +
stat_qq_line(distribution = qt, dparams = mod$df.residual) +
labs(x = "theoretical quantiles",
y = "empirical quantiles") +
ggtitle("QQ-Plot Studentized Residuals")
#
# resid vs. fix + smooth
ggplot(data = res.dat,
aes(x = fix, y = resid)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fixation")
#
# resid vs. emo + smooth
ggplot(data = res.dat,
aes(x = emo, y = resid)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("emotion")
#
# resid vs. emo + smooth
ggplot(data = res.dat,
aes(x = emo, y = resid)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("emotion")
#
# resid vs. age + smooth
ggplot(data = res.dat,
aes(x = age, y = resid)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("age")
#
# resid vs. sex
ggplot(res.dat, aes(x=as.factor(sex), y=resid)) +
geom_boxplot() +
labs(title="Residuals",x="sex", y = "residuals")
tapply(res.dat$resid,as.factor(res.dat$sex),function(x) c(mean(x),var(x)) )
#
# resid vs. rev
ggplot(res.dat, aes(x=as.factor(rev), y=resid)) +
geom_boxplot() +
labs(title="Residuals",x="rev", y = "residuals")
tapply(res.dat$resid,as.factor(res.dat$rev),function(x) c(mean(x),var(x)) )
#
# resid vs. educ
ggplot(res.dat, aes(x=as.factor(educ), y=resid)) +
geom_boxplot() +
labs(title="Residuals",x="educ", y = "residuals")
tapply(res.dat$resid,as.factor(res.dat$educ),function(x) c(mean(x),var(x)) )
#
# resid vs. stat
ggplot(res.dat, aes(x=as.factor(stat), y=resid)) +
geom_boxplot() +
labs(title="Residuals",x="stat", y = "residuals")
tapply(res.dat$resid,as.factor(res.dat$stat),function(x) c(mean(x),var(x)) )
# resid vs. fitted + smooth
ggplot(data = res.dat,
aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth() +
theme(legend.position = "bottom") +
ylab("residuals") +
xlab("fitted values")
########################################################
# 6: R2
mod<-lm(intent~sex+age+as.factor(rev)+as.factor(educ)+stat+fix+emo,data=intention)
summary(mod)
########################################################
# 6: R2
mod<-lm(intent~sex+age+as.factor(rev)+as.factor(educ)+stat+fix+emo,data=intention)
summary(mod)
# by hand / manuellement
# break-down:
anova(mod) # (sequential SS)
# SSR
SSR<-sum(anova(mod)[1:7,2])
# SSE
SSE<-anova(mod)[8,2]
# SST
SST<-anova(null)[,2]
# R2
SSR/SST
# sigma-hat
np1<-anova(mod)[8,1]
sqrt(SSE/np1)
reglin2<-read.csv("reglin2.csv")
head(reglin2)
reglin2<-read.csv("reglin2.csv")
reglin2<-read.csv("reglin2.csv")
reglin2<-read.csv("reglin2.csv")
reglin2<-read.csv("reglin2.csv")
reglin2<-read.csv("Data/reglin2.csv")
reglin2<-read.csv("intention.csv")
reglin2<-read.csv("reglin2.csv")
reglin2<-read.csv("reglin2.csv", sep=",")
reglin2<-read.csv("reglin2.csv", sep=";")
reglin2<-read.csv("/reglin2.csv")
reglin2<-read.csv("./reglin2.csv")
